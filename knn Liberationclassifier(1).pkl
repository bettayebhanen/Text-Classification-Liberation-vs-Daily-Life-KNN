{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "c45f5a14-1042-4bdb-96a8-46d3293dea58",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "84ca7421-7a1f-43c3-8b0b-be88203c2cc5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>text</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Freedom is not given, it is taken.</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>We only ask to live free in our homeland.</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>A people who do not know their history do not ...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Independence is the prize earned by the blood ...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>No people who reject colonization will be humi...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>96</td>\n",
       "      <td>I listen to podcasts while jogging.</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>97</td>\n",
       "      <td>We go shopping on weekends.</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>98</td>\n",
       "      <td>He reads comics in the afternoon.</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>99</td>\n",
       "      <td>I clean my room every day.</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>100</td>\n",
       "      <td>She plants flowers in the garden.</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     id                                               text  target\n",
       "0     1                 Freedom is not given, it is taken.       0\n",
       "1     2          We only ask to live free in our homeland.       0\n",
       "2     3  A people who do not know their history do not ...       0\n",
       "3     4  Independence is the prize earned by the blood ...       0\n",
       "4     5  No people who reject colonization will be humi...       0\n",
       "..  ...                                                ...     ...\n",
       "95   96                I listen to podcasts while jogging.       1\n",
       "96   97                        We go shopping on weekends.       1\n",
       "97   98                  He reads comics in the afternoon.       1\n",
       "98   99                         I clean my room every day.       1\n",
       "99  100                  She plants flowers in the garden.       1\n",
       "\n",
       "[100 rows x 3 columns]"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.read_csv('freedom_vs_daily_sentences.csv')\n",
    "data.head(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "6a862e2b-a13e-4d28-9fed-0d434b3edc10",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 100 entries, 0 to 99\n",
      "Data columns (total 3 columns):\n",
      " #   Column  Non-Null Count  Dtype \n",
      "---  ------  --------------  ----- \n",
      " 0   id      100 non-null    int64 \n",
      " 1   text    100 non-null    object\n",
      " 2   target  100 non-null    int64 \n",
      "dtypes: int64(2), object(1)\n",
      "memory usage: 2.5+ KB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "id        0\n",
       "text      0\n",
       "target    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.info()\n",
    "data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "9116748e-eed4-4427-ad68-e43625739035",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "x = data.drop('target', axis=1)\n",
    "y=data['target']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "d37aeaed-6c39-4933-8bc6-e3b61fb42f67",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     id                                               text\n",
      "0     1                 Freedom is not given, it is taken.\n",
      "1     2          We only ask to live free in our homeland.\n",
      "2     3  A people who do not know their history do not ...\n",
      "3     4  Independence is the prize earned by the blood ...\n",
      "4     5  No people who reject colonization will be humi...\n",
      "..  ...                                                ...\n",
      "95   96                I listen to podcasts while jogging.\n",
      "96   97                        We go shopping on weekends.\n",
      "97   98                  He reads comics in the afternoon.\n",
      "98   99                         I clean my room every day.\n",
      "99  100                  She plants flowers in the garden.\n",
      "\n",
      "[100 rows x 2 columns]\n",
      "0     0\n",
      "1     0\n",
      "2     0\n",
      "3     0\n",
      "4     0\n",
      "     ..\n",
      "95    1\n",
      "96    1\n",
      "97    1\n",
      "98    1\n",
      "99    1\n",
      "Name: target, Length: 100, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(x)\n",
    "print(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "124d32ad-9394-403b-a79b-4f1198d46862",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Split the dataset 20%test 80%train\n",
    "x_train, x_test, y_train, y_test = train_test_split(\n",
    "    x, y,          \n",
    "    test_size=0.2, \n",
    "    random_state=44 \n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "9a7bfd1c-5283-40ca-a95a-ca94e34b5f8b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fold 1 Accuracy: 0.9375\n",
      "Fold 2 Accuracy: 0.9375\n",
      "Fold 3 Accuracy: 0.9375\n",
      "Fold 4 Accuracy: 0.7500\n",
      "Fold 5 Accuracy: 0.7500\n",
      "\n",
      "Average Cross-Validation Accuracy: 0.8625\n"
     ]
    }
   ],
   "source": [
    "#  Vectorization\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "vectorizer = TfidfVectorizer()\n",
    "x_train_tfidf = vectorizer.fit_transform(x_train['text'])\n",
    "x_test_tfidf = vectorizer.transform(x_test['text'])\n",
    "\n",
    "#  Normalization\n",
    "from sklearn.preprocessing import Normalizer\n",
    "scaler = Normalizer()\n",
    "x_train_scaled = scaler.fit_transform(x_train_tfidf)\n",
    "x_test_scaled = scaler.transform(x_test_tfidf)\n",
    "\n",
    "# Stratified K-Fold\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.metrics import accuracy_score\n",
    "import numpy as np\n",
    "\n",
    "skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=44)\n",
    "cv_scores = []\n",
    "\n",
    "for fold, (train_idx, val_idx) in enumerate(skf.split(x_train_scaled, y_train), 1):\n",
    "    X_tr = x_train_scaled[train_idx].toarray()\n",
    "    X_val = x_train_scaled[val_idx].toarray()\n",
    "    y_tr = y_train.iloc[train_idx]\n",
    "    y_val = y_train.iloc[val_idx]\n",
    "\n",
    "    knn = KNeighborsClassifier(n_neighbors=5)\n",
    "    knn.fit(X_tr, y_tr)\n",
    "\n",
    "    y_pred_val = knn.predict(X_val)\n",
    "    acc = accuracy_score(y_val, y_pred_val)\n",
    "    cv_scores.append(acc)\n",
    "\n",
    "    print(f\"Fold {fold} Accuracy: {acc:.4f}\")\n",
    "\n",
    "print(f\"\\nAverage Cross-Validation Accuracy: {np.mean(cv_scores):.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "37acb9c7-6764-4e23-8530-bbfda261e716",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Final Test Accuracy: 0.9\n",
      "\n",
      "Classification Report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.83      1.00      0.91        10\n",
      "           1       1.00      0.80      0.89        10\n",
      "\n",
      "    accuracy                           0.90        20\n",
      "   macro avg       0.92      0.90      0.90        20\n",
      "weighted avg       0.92      0.90      0.90        20\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n",
    "\n",
    "final_knn = KNeighborsClassifier(n_neighbors=5)\n",
    "final_knn.fit(x_train_scaled, y_train) \n",
    "\n",
    "y_pred_test = final_knn.predict(x_test_scaled)\n",
    "\n",
    "accuracy = accuracy_score(y_test, y_pred_test)\n",
    "print(\"\\nFinal Test Accuracy:\", accuracy)\n",
    "\n",
    "print(\"\\nClassification Report:\\n\", classification_report(y_test, y_pred_test))\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "288e34fd-f589-4a6d-9106-b0df842905ff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from matplotlib.colors import LinearSegmentedColormap\n",
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "cm = confusion_matrix(y_test, y_pred_test)\n",
    "classes = ['Meaning of Liberation (0)', 'Everyday Life (1)']\n",
    "\n",
    "colors = ['green', 'white', 'red']\n",
    "cmap = LinearSegmentedColormap.from_list('algeria_flag', colors)\n",
    "\n",
    "plt.figure(figsize=(6,5))\n",
    "sns.heatmap(cm, annot=True, fmt='d', cmap=cmap, xticklabels=classes, yticklabels=classes, cbar=False)\n",
    "plt.xlabel('Predicted Label', fontsize=12)\n",
    "plt.ylabel('True Label', fontsize=12)\n",
    "plt.title('KNN Confusion Matrix: Liberation Classifier', fontsize=14)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "b073a783-8324-491c-96b0-15d0295126e7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['knn_liberation_classifier.pkl']"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import joblib\n",
    "\n",
    "# Save our models\n",
    "joblib.dump(vectorizer, 'tfidf_vectorizer.pkl')\n",
    "joblib.dump(scaler, 'normalizer.pkl')\n",
    "joblib.dump(final_knn, 'knn_liberation_classifier.pkl')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "45f37396-7a45-45d4-863b-c87f783e9ce0",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
